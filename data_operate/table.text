###   临时表   ###

    临时表只在当前连接可见，当关闭连接时，MySQL会自动删除表并释放所有空间。
    临时表在MySQL3.23版本中添加

    create tempory table table_name (
        id int(11) auto_increment,
        name varchar(20) not null default '';
    );

    # 删除临时表
        drop table table_name;


###   事务   ###

    MySQL事务主要用于处理操作量大，复杂度高的数据。
        1. 在MySQL中只有使用了innodb数据库引擎的数据库表才支持事务。
        2. 事务处理可以用来维护数据库的完整性，保证成批的SQL语句要么全部执行，要么全部不执行
        3. 事务用来管理insert, update和delete语句

    事务必须满足4个条件：原子性，一致性，隔离性，持久性

    原子性：一个事务中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚到事务开始之前的状态，就像事务没开启一样。
    一致性：在事务开始之前和事务结束之后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有得预设规则，这包含资料的精准度，串联性以及后续数据库可以自发性的完成预定的工作。
    隔离性：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务由于交叉执行而导致的数据不一致。
            事务隔离分为不同级别：读未提交(read uncommitted)，读以提交(read committed)，可重复读(repeated read)，和串行化(serializable)

            读未提交(read uncommitted)
                一个事务可以读取另一个未提交事务的数据。(脏读)
            读已提交(read committed)  能解决脏读的方法
                一个事务要等另一个事务提交后才能读取数据。(不可重复读)
            可重复读(repeated read) 能解决不可重复读的方法
                在开始读取数据(事务开始)时，不再允许修改操作。(幻读)
            可序列化(serializable) 能解决幻读的方法
                serializable是最高的事务隔离级别，在该级别下，事务串行化顺序执行，可以避免脏读，不可重复读和幻读，但是这种隔离级别性能低，一般不使用。

    持久性：事务处理后，对数据的修改是永久的，即使系统故障也不会失去。


###   存储引擎   ###

    数据库存储引擎是数据库底层软件组织，数据库管理系统使用存储引擎进行创建，查询，更新和删除数据。

    查看存储引擎
        show engines;
    查看默认的存储引擎
        show variables like 'storage_engine';

    innodb存储引擎
        innodb是事务型数据库的首选引擎，支持事务安全表(ACID)，支持行锁定和外键。

        innodb主要特性
            为MySQL提供了具有提交，回滚和崩溃恢复能力的事务安全引擎。
            innodb锁定在行级并且也在select语句中提供一个类似oracle的非锁定读。
            innodb存储引擎为在主内存中缓存数据和索引而维持它自己得缓冲池。
                    innodb将它的表和索引在一个逻辑表空间中，表空间可以包含数个文件。
                    在myisam表中每个表被存放在分离的文件中。innodb表可以是任何尺寸，即使在文件尺寸被限制为2GB的操作系统上
            innodb支持外键完整性约束，存储表中数据时，每张表的存储都按主键顺序存放，如果没有显示在表定义时指定主键，innodb会为每一行生成一个6字节的rowid，并以此作为主键。

    myisam存储引擎
        myisam拥有较高的插入查询速度，但不支持事务。

        主要特性
            被大文件系统和操作系统支持
            当把删除和更新及插入操作混合使用的时候，动态尺寸的行产生的碎片更少。
            每个myisam表最大索引数是64，可以通过重新编译改变。每个索引最大的列数是16
            最大的键长度是1000字节，也可通过编译改变，对于键超过250字节的情况，一个超过1024字节的键将被用上
            blob和text列也可以被索引
            null被允许在索引的列中，这个值占每个键的0~1个字节
            所有数字键以高字节优先被存储以允许一个更高的索引压缩
            每个myisam类型的表都有一个auto_increment的内部列，当insert和update操作的时候该列被更新，同时auto_increment列被更新。所以说，myisam类型表的auto_increment列更新比innodb类型表的auto_increment快
            可以把数据文件和索引文件放在不同目录
            每个字符列可以有不同的字符集
            有varchar的表可以固定或者动态记录长度
            varchar和char列可以多达64kb

        使用myisam存储引擎创建数据库，将产生3个文件。文件的名字以表名字开始，扩展名之处文件类型：frm文件存储表定义，数据文件的扩展名为.MYD(MYData)，索引文件的扩展名.MYI(MYIndex)

    memory存储引擎
        memory存储引擎将表中的数据存储到内存中，未查询和引用其他表提供快速方问

        主要特性
            memory表的每个表可以多达32个索引，每个索引16列，以及500字节的最大键长度
            memory存储引擎执行hash和btree缩影
            可以在一个memory表中有非唯一键值
            memory表使用一个固定的记录长度格式
            memory不支持blob和text列
            memory支持auto_increment列和对可包含null值的列的索引
            memory表在所由客户端之间共享
            memory表内存被存储在内存中，内存是memory表和服务器在查询处理时的空闲中，创建的内部表共享
            当不再需要memory表的内容时，要释放被memory表使用的内存，应该执行delete from或truncate table，或者删除整个表(drop table)

    存储引擎的选择
        innodb：支持事务处理，支持外键，支持崩溃修复能力和并发控制。
        myisam：插入数据快，空间和内存使用比较低。
        memory：所有的数据都在内存中，数据的处理速度快，但安全性不高。

    note：
            同一个数据库也可以使用多种存储引擎的表。
            如果一个表要求比较高的事务处理，可以选择innodb
            将查询要求比较高的表选择myisam存储
            需要一个用于查询的临时表，选择memory存储引擎














