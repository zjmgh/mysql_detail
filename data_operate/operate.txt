#####   null值处理  #####
    MySQL使用select及where子句来读取数据表中的数据，但是当提供的查询条件为null时，该命令可能无法正常工作
    为了处理这种情况，MySQL提供了三大运算符：
        is null: 当列的值是null时，返回true
        is not null: 当列的值不为null时，返回true
        <=>: 比较操作符，当比较的两个值相等或者都为null时返回true

#####  正则表达式  #####
    使用regexp操作符进行正则表达式匹配
        ^    匹配输入字符串的开始位置
        $    匹配输入字符串的结束位置
        .    匹配除"\n"之外的所有的单个字符
        [...]    字符集合，匹配所包含的任意一个字符
        [^...]    负值字符集合，匹配未包含的任意字符
        p1|p2|p3    匹配其中一个规则
        *    匹配前面的子表达式零次或者多次
        +    匹配前面的子表达式一次或者多次
        {n}    n是一个非负数，匹配确定的n次
        {n, m}    m和n均为非负数，其中n<=m，最少匹配n次且最多匹配m次

#####   元数据   #####
    查询结果信息：select，update，delete语句影响行数。
    数据库和数据表的信息：包含了数据库及数据表的结构信息
    MySQL服务器信息：包含了数据库服务器的当前状态，版本号等

        select version();   服务器版本信息
        select database();  当前数据库名
        select user();      当前用户名
        show status;        服务器状态
        show variables;     服务器配置变量

#####   MySQL序列使用   #####
    MySQL序列是一组整数：1，2，3...，由于一张数据表只有能一个字段自增，如果想实现其他字段也自动增加，就可以使用MySQL序列来实现
    使用auto_increment
    获取auto_increment值：使用SQL中的last_insert_id()函数来获取最后插入表中的自增列的值
    重置序列: 如果你删除了数据表中的多条记录，并希望对剩下数据的auto_increment列进行重新排列，那么你可以通过删除自增的列，然后重新排列。如果在删除的时候又有新记录添加，有可能会出现数据混乱
        alter table insert  drop id;
        alter table insert add id int unsigned not null auto_increment first, add primary key(id);
    设置序列的开始值
         CREATE TABLE insect (
            id int not null auto_increment
         )engine=innodb auto_increment=100 charset=utf8;

         alter table insert auto_increment=100;

#####   MySQL处理重复数据   #####
    防止表中出现重复数据
        在MySQL数据表中设置指定的字段为primary key(主键)或者unique(唯一)索引来保证数据唯一性
    统计重复数据
        确定哪一列包含的值可能会重复
        在列选择列表使用count(*)列出的那些列
        在group by 子句中列出的列
        having子句设置重复数大于1
    过滤重复的数据
        在select语句中使用distinct关键字来过滤重复数据
        使用group by来读取数据表中不重复的数据
    删除重复数据
        create table tmp select * from table_name group by name;
        drop table table_name;
        alter table tmp rename to table_name;

        在数据表中添加index(索引)和primary key(主键)，这种简单的方法来删除表中重复的记录
            alter ignore table table_name add primary key (name);

#####   MySQL及SQL注入   #####
    通过网页回去用户输入的数据并将其插入数据库，就有可能发生SQL注入安全问题
    SQL注入：通过把SQL命令插入到web表单递交或输入域名页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。
    防止SQL注入
        永远不要相信用户的输入。对用户的输入进行校验，可以通过正则表达式，或限制长度；对单双引号进行转换
        永远不要使用动态拼装SQL，可以使用参数化的SQL或者直接使用存储过程进行数据查询存取
        永远不要使用管理员权限的数据库连接，为每个应用使用单独的权限有限的数据库连接
        不要把机密的信息直接存放，加密或者hash掉密码和敏感的信息
        应用的异常信息应该给出尽可能少的提示，最好使用自定义的错误信息对原始错误信息进行包装
    like语句中的注入
        like查询时，如果用户输入的值有"_"和"%", 则会出现这种情况

#####   MySQL导出数据   #####
    使用select ... into outfile 语句导出数据
        select * from table_name into outfile "/tmp/tmp.txt";

        属性
            load data infile 是select ... into outfile的逆操作。
            写入文件，该文件被创建于服务器主机，因此必须拥有file权限。
            需要有一个登陆服务器的账号来检索文件。
            在unix中，该文件被创建后是可读的，权限由MySQL服务器所拥有。意味着，虽然你可以读取该文件，但可能无法将其删除。

    导出表作为原始数据
        mysqldump 是MySQL用于转存数据库的使用程序。主要产生一个SQL脚本，其中包含从头重新创建数据库所必须的命令 create table insert等
        使用mysqldump导出数据需要使用--tab选项来指定导出文件指定的目录，该目标必须是可写的
            mysqldump -u root -p --no-create-info --tab =/tmp database_name table_name

        导出表数据到指定文件
            mysqldump -u root -p database_name table_name > dump.txt

        导出整个数据库的数据
            mysqldump -u root -p database_name > database_name.txt

        备份所有数据库(在MySQL 3.23.12及以后加入)
            mysqldump -u root -p --all-databases > all_databases_name.txt

        将数据表及数据库拷贝至其他主机
            mysqldump -u root -p database_name | mysql -h other_host.com database_name

#####   MySQL导入数据   #####
    MySQL命令导入
        msyql -u root -p pwd < database_name.sql

    source命令导入
        create database table_name;
        use table_name;
        set names  utf8;
        source /tmp/table_name.sql

    使用load data导入数据
        load data local infile "dump.txt" into table table_name;

        如果指定local关键字，则表明从客户机上按路径读取文件。如果没有指定，则文件在服务器上按路径读取文件。
        明确地在load data语句中指出列值得分隔符和行尾标记，但是默认标记是定位符和换行符
        两个命令得fields和lines子句得语法是一样得。两个子句都是可选得，但是如果两个同时被指定，fields子句必须出现在lines子句之前
        如果指定一个fields子句，它得子句(terminated by, [optionally]enclosed by和escaped by)也是可选得，不过必须至少指定其中一个。
            load data local infile "dump.txt" into table table_name fields terminated by ':' lines terminated by '\r\n';

        load data 默认情况下是按照数据文件中列的顺序插入数据的，如果数据文件的列与插入表中的列不一致，则需要指定列的顺序。
        如：在数据文件中的列的顺序是a, b, c，但在插入表的列的顺序为b,c,a，则数据导入语法为:
            load data local infile "dump.txt" into table table_name (b,c,a)

    使用mysqlimport导入数据
        mysqlimport 客户端提供了load data infileql 语句的一个命令行接口。mysqlimport 的大多数选项直接对应load infile子句。
        从文件dump.txt中将数据导入到table_name数据表中
            mysqlimport -u root -p --local table_name table_name.txt

        mysqlimport命令可以指定选项来设置指定格式
            mysqlimport -u root -p --local --fields-terminated-by=":" --lines-terminated-by="\r\n" table_name table_name.txt

        mysqlimport语句中使用--columns选项来设置列的顺序
            mysqlimport -u root -p --local --columns=b,c,a table_name table_name.txt

        mysqlimport的常用选项介绍
            选项                                              功能
            -d or --delete                                    新数据导入数据表中之前删除数据表中的所有信息
            -f or --force                                     不管是否遇到错误，mysqlimport将强制继续插入数据
            -i or --ignore                                    跳过或者忽略那些有相同唯一关键字的行，导入文件中的数据将被忽略
            -l or -lock-tables                                数据被插入之前锁住表，防止更新数据库时，用户的查询和更新受到影响
            -r or -replace                                    代替表中有相同唯一关键字的记录
            --fields-enclosed-by=char                         指定文本文件中数据的记录时以什么括起，很多情况下数据以双引号括起，默认情况是数据没有被字符括起的
            --fields-terminated-by=char                       指定各个数据的值之间的分隔符。默认的分隔符是tab
            --lines-terminated-by=str                         指定文本文件中行与行之间数据的分隔字符串或者字符。默认的情况下mysqlimport以newline为行分隔符。可以用一个字符串来代替一个单个的字符：一个新行或者一个回车

#####   MySQL函数   #####
    字符串函数
    ASCII(s)                                    返回一个字符串s的第一个字符的ASCII码
    CHAR_LENGTH(s)                              返回字符串s的字符数
    CHARACTER_LENGTH(s)                         返回字符串s的字符数
    CONCAT(s1,s2...sn)                          合并多个字符串
    CONCAT_WS(x, s1, s2...sn)                   合并多个字符串并添加分隔符x
    FIELD(s, s1, s2...)                         返回一个字符串s在字符串列表中的位置
    FIND_IN_SET(s1, s2)                         返回在字符串s2中与s1匹配的字符串的位置
    FORMAT(x, n)                                将数字x进行格式化"#,###.##"，将x保留小数点后n位，最后一位四舍五入
    INSERT(s1, x, len, s2)                      字符串s2替换s1的x位置开始长度为len的字符串
    LOCATE(s1, s)                               从字符串s中获取s1开始的位置
    LCASE(s)                                    将字符串s的所有字符都转化为小写
    LEFT(s, n)                                  返回字符串s的前n个字符
    LOWER(s)                                    将字符串s的所有字符都转化为小写
    LPAD(s1, len, s2)                           在字符串s1的开始处填充字符串s2，使字符串长度到达len
    LTRIM(s)                                    去掉字符串s开始处的空格
    MID(s, n, len)                              从字符串s的n位置
    POSITION(s1 IN s)                           从字符串s中获取s1的开始位置
    REPEAT(s, n)                                将字符串s重复n次
    REPLACE(s, s1, s2)                          将字符串s2代替字符串s中的s1
    REVERSE(s)                                  将字符串s的顺序反过来
    RIGHT(s, n)                                 返回字符串s的后n个字符
    RPAD(s1, len, s2)                           在字符串s1的结尾处添加字符串s2，使字符串的长度达到len
    RTRIM(s)                                    去掉字符串s结尾处的空格
    SPACE(n)                                    返回n个空格
    STRCMP(s1, s2)                              比较字符串s1和s2，如果s1与s2相等返回0，如果s1>s2返回1，如果s1<s2返回-1
    SUBSTR(s, start, length)                    从字符串s的start位置截取长度为length的子字符串
    SUBSTRING(s, start, length)                 从字符串s的start位置截取长度为length的子字符串
    TRIM(s)                                     去掉字符串s开始和结尾的空格
    UCASE(s)                                    将字符串转换为大写
    UPPER(s)                                    将字符串转换为大写


    MySQL 数字函数
    ABS(x)                                      返回 x 的绝对值
    ACOS(x)                                     求 x 的反余弦值(参数是弧度)
    AVG(expression)                             返回一个表达式的平均值，expression 是一个字段
    CEIL(x)                                     返回大于或等于 x 的最小整数
    COS(x)                                      求余弦值(参数是弧度)
    COUNT(expression)                           返回查询的记录总数，expression 参数是一个字段或者 * 号
    DEGREES(x)                                  将弧度转换为角度
    n DIV m                                     整除，n 为被除数，m 为除数
    EXP(x)                                      返回 e 的 x 次方
    FLOOR(x)                                    返回小于或等于 x 的最大整数
    GREATEST(expr1, expr2, expr3, ...)          返回列表中的最大值
    LEAST(expr1, expr2, expr3, ...)             返回列表中的最小值
    SUM(expression)                             返回指定字段的总和


    MySQL日期函数
    ADDDATE(d,n)                                计算起始日期 d 加上 n 天的日期
    ADDTIME(t,n)                                时间 t 加上 n 秒的时间
    CURDATE()                                   返回当前日期
    CURRENT_TIME()                              返回当前时间
    CURRENT_TIMESTAMP()                         返回当前日期和时间
    DATE(exp)                                   从日期或日期时间表达式中提取日期值
    DATEDIFF(d1,d2)                             计算日期 d1->d2 之间相隔的天数
    DATE_ADD(d，INTERVAL expr type)             计算起始日期 d 加上一个时间段后的日期
    DATE_FORMAT(d,f)                            按表达式 f的要求显示日期 d
    DATE_SUB(date,INTERVAL expr type)           函数从日期减去指定的时间间隔
    DAY(d)                                      返回日期值 d 的日期部分
    DAYNAME(d)                                  返回日期 d 是星期几，如 Monday,Tuesday
    DAYOFMONTH(d)                               计算日期 d 是本月的第几天
    DAYOFWEEK(d)                                日期 d 今天是星期几，1 星期日，2 星期一，以此类推
    DAYOFYEAR(d)                                计算日期 d 是本年的第几天
    EXTRACT(type FROM d)                        从日期 d 中获取指定的值，type 指定返回的值。
                                                type可取值为：
                                                        MICROSECOND
                                                        SECOND
                                                        MINUTE
                                                        HOUR
                                                        DAY
                                                        WEEK
                                                        MONTH
                                                        QUARTER
                                                        YEAR
                                                        SECOND_MICROSECOND
                                                        MINUTE_MICROSECOND
                                                        MINUTE_SECOND
                                                        HOUR_MICROSECOND
                                                        HOUR_SECOND
                                                        HOUR_MINUTE
                                                        DAY_MICROSECOND
                                                        DAY_SECOND
                                                        DAY_MINUTE
                                                        DAY_HOUR
                                                        YEAR_MONTH
    FROM_DAYS(n)                                计算从 0000 年 1 月 1 日开始 n 天后的日期
    HOUR(t)                                     返回 t 中的小时值
    LAST_DAY(d)                                 返回给给定日期的那一月份的最后一天
    LOCALTIME()                                 返回当前日期和时间
    MAKEDATE(year, day-of-year)                 基于给定参数年份 year 和所在年中的天数序号 day-of-year 返回一个日期
    MAKETIME(hour, minute, second)              组合时间，参数分别为小时、分钟、秒
    MINUTE(t)                                   返回 t 中的分钟值
    MICROSECOND(date)                           返回日期参数所对应的微秒数
    MONTHNAME(d)                                返回日期当中的月份名称，如 November
    MONTH(d)                                    返回日期d中的月份值，1 到 12
    NOW()                                       返回当前日期和时间
    PERIOD_ADD(period, number)                  为 年-月 组合日期添加一个时段
    PERIOD_DIFF(period1, period2)               返回两个时段之间的月份差值
    QUARTER(d)                                  返回日期d是第几季节，返回 1 到 4
    SECOND(t)                                   返回 t 中的秒钟值
    SEC_TO_TIME(s)                              将以秒为单位的时间 s 转换为时分秒的格式
    STR_TO_DATE(string, format_mask)            将字符串转变为日期
    SUBDATE(d,n)                                日期 d 减去 n 天后的日期
    SUBTIME(t,n)                                时间 t 减去 n 秒的时间
    SYSDATE()                                   返回当前日期和时间
    TIME(expression)                            提取传入表达式的时间部分
    TIME_FORMAT(t,f)                            按表达式 f 的要求显示时间 t
    TIME_TO_SEC(t)                              将时间 t 转换为秒
    TIMEDIFF(time1, time2)                      计算时间差值
    TO_DAYS(d)                                  计算日期 d 距离 0000 年 1 月 1 日的天数
    WEEK(d)                                     计算日期 d 是本年的第几个星期，范围是 0 到 53
    WEEKDAY(d)                                  日期 d 是星期几，0 表示星期一，1 表示星期二
    WEEKOFYEAR(d)                               计算日期 d 是本年的第几个星期，范围是 0 到 53
    YEAR(d)                                     返回年份
    YEARWEEK(date, mode)                        返回年份及第几周（0到53），mode 中 0 表示周天，1表示周一，以此类推


    MySQL高级函数
    BIN(x)                                      返回 x 的二进制编码
    BINARY(s)                                   将字符串 s 转换为二进制字符串
    CONNECTION_ID()                             返回唯一的连接 ID
    CURRENT_USER()                              返回当前用户
    DATABASE()                                  返回当前数据库名
    LAST_INSERT_ID()                            返回最近生成的 AUTO_INCREMENT 值
    SESSION_USER()                              返回当前用户
    SYSTEM_USER()                               返回当前用户
    USER()                                      返回当前用户
    VERSION()                                   返回数据库的版本号
















